{"version":3,"sources":["src/qrCodeScanner.js"],"names":["qrcode","window","video","document","createElement","canvasElement","getElementById","canvas","getContext","qrResult","outputData","btnScanQR","scanning","tick","height","videoHeight","width","videoWidth","drawImage","requestAnimationFrame","scan","decode","e","setTimeout","callback","res","innerText","srcObject","getTracks","forEach","track","stop","hidden","onclick","navigator","mediaDevices","getUserMedia","facingMode","then","stream","setAttribute","play"],"mappings":";AAAA,IAAMA,EAASC,OAAOD,OAEhBE,EAAQC,SAASC,cAAc,SAC/BC,EAAgBF,SAASG,eAAe,aACxCC,EAASF,EAAcG,WAAW,MAElCC,EAAWN,SAASG,eAAe,aACnCI,EAAaP,SAASG,eAAe,cACrCK,EAAYR,SAASG,eAAe,eAEtCM,GAAW,EAiCf,SAASC,IACPR,EAAcS,OAASZ,EAAMa,YAC7BV,EAAcW,MAAQd,EAAMe,WAC5BV,EAAOW,UAAUhB,EAAO,EAAG,EAAGG,EAAcW,MAAOX,EAAcS,QAEjEF,GAAYO,sBAAsBN,GAGpC,SAASO,IACP,IACEpB,EAAOqB,SACP,MAAOC,GACPC,WAAWH,EAAM,MA3CrBpB,EAAOwB,SAAW,SAAAC,GACZA,IACFf,EAAWgB,UAAYD,EACvBb,GAAW,EAEXV,EAAMyB,UAAUC,YAAYC,QAAQ,SAAAC,GAClCA,EAAMC,SAGRtB,EAASuB,QAAS,EAClB3B,EAAc2B,QAAS,EACvBrB,EAAUqB,QAAS,IAIvBrB,EAAUsB,QAAU,WAClBC,UAAUC,aACPC,aAAa,CAAElC,MAAO,CAAEmC,WAAY,iBACpCC,KAAK,SAASC,GACb3B,GAAW,EACXH,EAASuB,QAAS,EAClBrB,EAAUqB,QAAS,EACnB3B,EAAc2B,QAAS,EACvB9B,EAAMsC,aAAa,eAAe,GAClCtC,EAAMyB,UAAYY,EAClBrC,EAAMuC,OACN5B,IACAO","file":"qrCodeScanner.7d6ca7a0.js","sourceRoot":"..","sourcesContent":["const qrcode = window.qrcode;\r\n\r\nconst video = document.createElement(\"video\");\r\nconst canvasElement = document.getElementById(\"qr-canvas\");\r\nconst canvas = canvasElement.getContext(\"2d\");\r\n\r\nconst qrResult = document.getElementById(\"qr-result\");\r\nconst outputData = document.getElementById(\"outputData\");\r\nconst btnScanQR = document.getElementById(\"btn-scan-qr\");\r\n\r\nlet scanning = false;\r\n\r\nqrcode.callback = res => {\r\n  if (res) {\r\n    outputData.innerText = res;\r\n    scanning = false;\r\n\r\n    video.srcObject.getTracks().forEach(track => {\r\n      track.stop();\r\n    });\r\n\r\n    qrResult.hidden = false;\r\n    canvasElement.hidden = true;\r\n    btnScanQR.hidden = false;\r\n  }\r\n};\r\n\r\nbtnScanQR.onclick = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia({ video: { facingMode: \"environment\" } })\r\n    .then(function(stream) {\r\n      scanning = true;\r\n      qrResult.hidden = true;\r\n      btnScanQR.hidden = true;\r\n      canvasElement.hidden = false;\r\n      video.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n      video.srcObject = stream;\r\n      video.play();\r\n      tick();\r\n      scan();\r\n    });\r\n};\r\n\r\nfunction tick() {\r\n  canvasElement.height = video.videoHeight;\r\n  canvasElement.width = video.videoWidth;\r\n  canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\r\n\r\n  scanning && requestAnimationFrame(tick);\r\n}\r\n\r\nfunction scan() {\r\n  try {\r\n    qrcode.decode();\r\n  } catch (e) {\r\n    setTimeout(scan, 300);\r\n  }\r\n}\r\n"]}